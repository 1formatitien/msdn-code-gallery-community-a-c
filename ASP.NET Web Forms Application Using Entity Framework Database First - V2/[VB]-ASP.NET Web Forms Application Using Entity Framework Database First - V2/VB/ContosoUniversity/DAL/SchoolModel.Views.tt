<# 
'*************************************************************************** 
' 
'Copyright (c) Microsoft Corporation. All rights reserved. 
' 
'THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF 
'ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY 
'IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR 
'PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT. 
' 
'***************************************************************************
#> 
 
<# 
    ' 
    ' TITLE: T4 template to generate views for an EDMX file in a VB project 
    ' 
    ' DESCRIPTION: 
    ' This is a T4 template to generate views in VB for an EDMX file in VB projects. 
    ' The generated views are automatically compiled into the project's output assembly. 
    ' 
    ' This template follows a simple file naming convention to determine the EDMX file to process: 
    ' - It assumes that [edmx-file-name].Views.tt will process and generate views for [edmx-file-name].EDMX 
    ' - The views are generated in the code behind file [edmx-file-name].Views.cs 
    ' 
    ' USAGE: 
    ' Do the following to generate views for an EDMX file (e.g. Model1.edmx) in a VB project 
    ' 1. In Solution Explorer, right-click the project node and choose "Add...Existing...Item" from the context menu 
    ' 2. Browse to and choose this .tt file to include it in the project  
    ' 3. Ensure this .tt file is in the same directory as the EDMX file to process  
    ' 4. In Solution Explorer, rename this .tt file to the form [edmx-file-name].Views.tt (e.g. Model1.Views.tt) 
    ' 5. In Solution Explorer, right-click Model1.Views.tt and choose "Run Custom Tool" to generate the views 
    ' 6. The views are generated in the code behind file Model1.Views.vb 
    ' 
    ' TIPS: 
    ' If you have multiple EDMX files in your project then make as many copies of this .tt file and rename appropriately 
    ' to pair each with each EDMX file. 
    ' 
    ' To generate views for all EDMX files in the solution, click the "Transform All Templates" button in the Solution Explorer toolbar 
    ' (its the rightmost button in the toolbar)  
    ' 
#> 
<# 
    ' 
    ' T4 template code follows 
    ' 
#> 
<#@ template language="VB" hostspecific="true"#> 
<#@ include file="EF.Utility.VB.ttinclude"#> 
<#@ output extension=".vb" #> 
<#  
	' Find EDMX file to process: Model1.Views.tt generates views for Model1.EDMX 
	Dim edmxFileName As String = Path.GetFileNameWithoutExtension(Me.Host.TemplateFile).ToLowerInvariant().Replace(".views", "") & ".edmx"
	Dim edmxFilePath As String = Path.Combine(Path.GetDirectoryName(Me.Host.TemplateFile), edmxFileName)
	If File.Exists(edmxFilePath) Then
		' Call helper class to generate pre-compiled views and write to output 
		Me.WriteLine(GenerateViews(edmxFilePath))
	Else
		Me.Error(String.Format("No views were generated. Cannot find file {0}. Ensure the project has an EDMX file and the file name of the .tt file is of the form [edmx-file-name].Views.tt", edmxFilePath))
	End If
	' All done! 
#> 
<#+ 
	Private Function GenerateViews(edmxFilePath As String) As String
		Dim loader As New MetadataLoader(Me)
		Dim workspace As MetadataWorkspace = New MetadataWorkspace()
		If Not loader.TryLoadAllMetadata(edmxFilePath, workspace) Then
			Me.Error("Error in the metadata")
			Return String.Empty
		End If

		Dim generatedViews As String = String.Empty
		Try
			Using writer As New StreamWriter(New MemoryStream())
				Dim mappingItems As StorageMappingItemCollection = DirectCast(workspace.GetItemCollection(DataSpace.CSSpace), StorageMappingItemCollection)

				' Initialize the view generator to generate views in C# 
				Dim viewGenerator As New EntityViewGenerator()
				viewGenerator.LanguageOption = LanguageOption.GenerateVBCode
				Dim errors As IList(Of EdmSchemaError) = viewGenerator.GenerateViews(mappingItems, writer)

				For Each e As EdmSchemaError In errors
					' log error 
					Me.Error(e.Message)
				Next

				Dim memStream As MemoryStream = TryCast(writer.BaseStream, MemoryStream)
				generatedViews = Encoding.UTF8.GetString(memStream.ToArray())
			End Using
		Catch ex As Exception
			' log error 
			Me.Error(ex.ToString())
		End Try

		Return generatedViews
	End Function
#>